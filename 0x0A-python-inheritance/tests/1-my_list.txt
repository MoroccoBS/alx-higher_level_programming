The ```MyList``` class that inherits from list
------------------------------------------------

>>> MyList = __import__("1-my_list").MyList

Checking for module docstring:
>>> module = __import__("1-my_list").__doc__
>>> len(module) > 1
True

Checking for class docstring:
>>> docstring = __import__("1-my_list").MyList.__doc__
>>> len(docstring) > 1
True

Checking for method docstring
        >>> docstringM = __import__("1-my_list").MyList.print_sorted.__doc__
        >>> len(docstringM) > 1
        True

Test class with given test case
	>>> my_list = MyList()

	>>> my_list.append(1)

	>>> my_list.append(4)

	>>> my_list.append(2)

	>>> my_list.append(3)

	>>> my_list.append(5)

	>>> print(my_list)
	[1, 4, 2, 3, 5]

	>>> my_list.print_sorted()
	[1, 2, 3, 4, 5]

	>>> print(my_list)
	[1, 4, 2, 3, 5]

Test class with empty object
	>>> obj1 = MyList()

	>>> print(obj1)
	[]

	>>> obj1.print_sorted()
	[]

Test class with negative values
	>>> obj2 = MyList()

	>>> obj2.append(-1)

	>>> obj2.append(0)

	>>> obj2.append(-233)

	>>> obj2.append(-9)

	>>> print(obj2)
	[-1, 0, -233, -9]

	>>> obj2.print_sorted()
	[-233, -9, -1, 0]

Test class with NULL object
	>>> obj3 = MyList()

	>>> obj3.append(NULL)
	Traceback (most recent call last):
		...
	NameError: name 'NULL' is not defined

	>>> print(obj3)
	[]

	>>> obj3.print_sorted()
	[]

Test class with NaN object
	>>> obj4 = MyList()

	>>> obj4.append(NaN)
	Traceback (most recent call last):
		...
	NameError: name 'NaN' is not defined

	>>> print(obj4)
	[]

	>>> obj4.print_sorted()
	[]

Test class with None object
	>>> obj5 = MyList()

	>>> obj5.append(None)

	>>> print(obj5)
	[None]

	>>> obj5.print_sorted()
	[None]


Test class with one input:
	>>> list = MyList([1, 2, 3, 4])
	>>> list.append(5)
	>>> list
	[1, 2, 3, 4, 5]

